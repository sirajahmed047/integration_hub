/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { type UseComboboxProps, type UseMultipleSelectionProps } from 'downshift';
import { ReactNode, FunctionComponent, ReactElement } from 'react';
import { type ItemBase, type SortingPropTypes } from './MultiSelectPropTypes';
export interface FilterableMultiSelectProps<Item extends ItemBase> extends SortingPropTypes<Item> {
    /**
     * Specify a label to be read by screen readers on the container node
     * @deprecated
     */
    'aria-label'?: string;
    /** @deprecated */
    ariaLabel?: string;
    className?: string;
    /**
     * Specify the text that should be read for screen readers that describes total items selected
     */
    clearSelectionDescription?: string;
    /**
     * Specify the text that should be read for screen readers to clear selection.
     */
    clearSelectionText?: string;
    /**
     * Specify the direction of the multiselect dropdown.
     */
    direction?: 'top' | 'bottom';
    /**
     * Disable the control
     */
    disabled?: boolean;
    /**
     * Additional props passed to Downshift
     */
    downshiftProps?: UseMultipleSelectionProps<Item>;
    /**
     * Default sorter is assigned if not provided.
     */
    filterItems(items: readonly Item[], extra: {
        inputValue: string | null;
        itemToString: NonNullable<UseMultipleSelectionProps<Item>['itemToString']>;
    }): Item[];
    /**
     * Specify whether the title text should be hidden or not
     */
    hideLabel?: boolean;
    /**
     * Provide helper text that is used alongside
     * the control label for additional help
     */
    helperText?: ReactNode;
    /**
     * Specify a custom `id`
     */
    id: string;
    /**
     * Allow users to pass in arbitrary items from their collection that are
     * pre-selected
     */
    initialSelectedItems?: Item[];
    /**
     * Is the current selection invalid?
     */
    invalid?: boolean;
    /**
     * If invalid, what is the error?
     */
    invalidText?: ReactNode;
    /**
     * Function to render items as custom components instead of strings.
     * Defaults to null and is overridden by a getter
     */
    itemToElement?: FunctionComponent<Item>;
    /**
     * Helper function passed to downshift that allows the library to render
     * a given item to a string label.
     *
     * By default, it extracts the `label` field from a given item
     * to serve as the item label in the list.
     */
    itemToString?(item: Item | null): string;
    /**
     * We try to stay as generic as possible here to allow individuals to pass
     * in a collection of whatever kind of data structure they prefer
     */
    items: Item[];
    /**
     * @deprecated `true` to use the light version.
     */
    light?: boolean;
    /**
     * Specify the locale of the control.
     * Used for the default `compareItems`,
     * which is used for sorting the list of items in the control.
     */
    locale?: string;
    /**
     * `onChange` is a utility for this controlled component to communicate to a
     * consuming component what kind of internal state changes are occurring.
     */
    onChange?(changes: {
        selectedItems: Item[];
    }): void;
    /**
     * A utility for this controlled component
     * to communicate to the currently typed input.
     */
    onInputValueChange?: UseComboboxProps<Item>['onInputValueChange'];
    /**
     * `onMenuChange` is a utility for this controlled component to communicate to a
     * consuming component that the menu was opened(`true`)/closed(`false`).
     */
    onMenuChange?(open: boolean): void;
    /**
     * Initialize the component with an open(`true`)/closed(`false`) menu.
     */
    open?: boolean;
    /**
     * Generic `placeholder` that will be used as the textual representation of
     * what this field is for
     */
    placeholder?: string;
    /**
     * Specify feedback (mode) of the selection.
     * `top`: selected item jumps to top
     * `fixed`: selected item stays at its position
     * `top-after-reopen`: selected item jump to top after reopen dropdown
     */
    selectionFeedback?: 'top' | 'fixed' | 'top-after-reopen';
    /**
     * For full control of the selected items
     */
    selectedItems?: Item[];
    /**
     * Specify the size of the ListBox.
     * Currently, supports either `sm`, `md` or `lg` as an option.
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * **Experimental**: Provide a `Slug` component to be rendered inside the `Checkbox` component
     */
    slug?: ReactNode;
    /**
     * Provide text to be used in a `<label>` element that is tied to the
     * combobox via ARIA attributes.
     */
    titleText?: ReactNode;
    /**
     * Callback function for translating ListBoxMenuIcon SVG title
     */
    translateWithId?(messageId: string, args?: Record<string, unknown>): string;
    type?: 'default' | 'inline';
    /**
     * Specify title to show title on hover
     */
    useTitleInItem?: boolean;
    /**
     * Specify whether the control is currently in warning state
     */
    warn?: boolean;
    /**
     * Provide the text that is displayed when the control is in warning state
     */
    warnText?: ReactNode;
}
declare const FilterableMultiSelect: {
    <Item extends ItemBase>(props: FilterableMultiSelectProps<Item>): ReactElement;
    propTypes?: any;
    contextTypes?: any;
    defaultProps?: any;
    displayName?: any;
};
export default FilterableMultiSelect;
