/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
var usePrefix = require('../../internal/usePrefix.js');
var Tag = require('./Tag.js');
require('../Tooltip/DefinitionTooltip.js');
var Tooltip = require('../Tooltip/Tooltip.js');
require('../Text/index.js');
var isEllipsisActive = require('./isEllipsisActive.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const getInstanceId = setupGetInstanceId["default"]();
const SelectableTag = _ref => {
  let {
    className,
    disabled,
    id,
    renderIcon,
    selected = false,
    slug,
    size,
    text,
    ...other
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const tagRef = React.useRef();
  const tagId = id || `tag-${getInstanceId()}`;
  const [selectedTag, setSelectedTag] = React.useState(selected);
  const tagClasses = cx__default["default"](`${prefix}--tag--selectable`, className, {
    [`${prefix}--tag--selectable-selected`]: selectedTag
  });
  const [isEllipsisApplied, setIsEllipsisApplied] = React.useState(false);
  React.useLayoutEffect(() => {
    const newElement = tagRef.current?.getElementsByClassName(`${prefix}--tag__label`)[0];
    setIsEllipsisApplied(isEllipsisActive.isEllipsisActive(newElement));
  }, [prefix, tagRef]);
  let normalizedSlug;
  if (slug && slug['type']?.displayName === 'Slug') {
    normalizedSlug = /*#__PURE__*/React__default["default"].cloneElement(slug, {
      size: 'sm',
      kind: 'inline'
    });
  }
  const tooltipClasses = cx__default["default"](`${prefix}--icon-tooltip`, `${prefix}--tag-label-tooltip`);

  // Removing onClick from the spread operator
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const {
    onClick,
    ...otherProps
  } = other;
  if (isEllipsisApplied) {
    return /*#__PURE__*/React__default["default"].createElement(Tooltip.Tooltip, {
      label: text,
      align: "bottom",
      className: tooltipClasses,
      leaveDelayMs: 0,
      onMouseEnter: () => false
    }, /*#__PURE__*/React__default["default"].createElement(Tag["default"], _rollupPluginBabelHelpers["extends"]({
      ref: tagRef,
      slug: slug,
      size: size,
      renderIcon: renderIcon,
      disabled: disabled,
      className: tagClasses,
      id: tagId,
      onClick: () => setSelectedTag(!selectedTag)
    }, otherProps), /*#__PURE__*/React__default["default"].createElement(Text.Text, {
      title: text,
      className: `${prefix}--tag__label`
    }, text), normalizedSlug));
  }
  return /*#__PURE__*/React__default["default"].createElement(Tag["default"], _rollupPluginBabelHelpers["extends"]({
    ref: tagRef,
    slug: slug,
    size: size,
    renderIcon: renderIcon,
    disabled: disabled,
    className: tagClasses,
    id: tagId,
    onClick: () => setSelectedTag(!selectedTag)
  }, otherProps), normalizedSlug, /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    title: text,
    className: `${prefix}--tag__label`
  }, text));
};
SelectableTag.propTypes = {
  /**
   * Provide a custom className that is applied to the containing <span>
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify if the `SelectableTag` is disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Specify the id for the tag.
   */
  id: PropTypes__default["default"].string,
  /**
   * Optional prop to render a custom icon.
   * Can be a React component class
   */
  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * Specify the state of the selectable tag.
   */
  selected: PropTypes__default["default"].bool,
  /**
   * Specify the size of the Tag. Currently supports either `sm`,
   * `md` (default) or `lg` sizes.
   */
  size: PropTypes__default["default"].oneOf(Object.keys(Tag.SIZES)),
  /**
   * **Experimental:** Provide a `Slug` component to be rendered inside the `SelectableTag` component
   */
  slug: PropTypes__default["default"].node,
  /**
   * Provide text to be rendered inside of a the tag.
   */
  text: PropTypes__default["default"].string
};

exports["default"] = SelectableTag;
