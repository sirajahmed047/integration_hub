/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
var usePrefix = require('../../internal/usePrefix.js');
require('../Text/index.js');
var deprecate = require('../../prop-types/deprecate.js');
var DefinitionTooltip = require('../Tooltip/DefinitionTooltip.js');
require('../Tooltip/Tooltip.js');
var isEllipsisActive = require('./isEllipsisActive.js');
var react = require('@floating-ui/react');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _Close;
const getInstanceId = setupGetInstanceId["default"]();
const TYPES = {
  red: 'Red',
  magenta: 'Magenta',
  purple: 'Purple',
  blue: 'Blue',
  cyan: 'Cyan',
  teal: 'Teal',
  green: 'Green',
  gray: 'Gray',
  'cool-gray': 'Cool-Gray',
  'warm-gray': 'Warm-Gray',
  'high-contrast': 'High-Contrast',
  outline: 'Outline'
};
const SIZES = {
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};
const Tag = /*#__PURE__*/React__default["default"].forwardRef(function Tag(_ref, forwardRef) {
  let {
    children,
    className,
    id,
    type,
    filter,
    // remove filter in next major release - V12
    renderIcon: CustomIconElement,
    title = 'Clear filter',
    // remove title in next major release - V12
    disabled,
    onClose,
    // remove onClose in next major release - V12
    size,
    as: BaseComponent,
    slug,
    ...other
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const tagRef = React.useRef();
  const ref = react.useMergeRefs([forwardRef, tagRef]);
  const tagId = id || `tag-${getInstanceId()}`;
  const [isEllipsisApplied, setIsEllipsisApplied] = React.useState(false);
  React.useLayoutEffect(() => {
    const newElement = tagRef.current?.getElementsByClassName(`${prefix}--tag__label`)[0];
    setIsEllipsisApplied(isEllipsisActive.isEllipsisActive(newElement));
  }, [prefix, tagRef]);
  const conditions = [`${prefix}--tag--selectable`, `${prefix}--tag--filter`, `${prefix}--tag--operational`];
  const isInteractiveTag = conditions.some(el => className?.includes(el));
  const tagClasses = cx__default["default"](`${prefix}--tag`, className, {
    [`${prefix}--tag--disabled`]: disabled,
    [`${prefix}--tag--filter`]: filter,
    [`${prefix}--tag--${size}`]: size,
    // TODO: V12 - Remove this class
    [`${prefix}--layout--size-${size}`]: size,
    [`${prefix}--tag--${type}`]: type,
    [`${prefix}--tag--interactive`]: other.onClick && !isInteractiveTag && isEllipsisApplied
  });
  const typeText = type !== undefined && type in Object.keys(TYPES) ? TYPES[type] : '';
  const handleClose = event => {
    if (onClose) {
      event.stopPropagation();
      onClose(event);
    }
  };

  // Slug is always size `md` and `inline`
  let normalizedSlug;
  if (slug && slug['type']?.displayName === 'Slug' && !isInteractiveTag) {
    normalizedSlug = /*#__PURE__*/React__default["default"].cloneElement(slug, {
      size: 'sm',
      kind: 'inline'
    });
  }
  if (filter) {
    const ComponentTag = BaseComponent ?? 'div';
    return /*#__PURE__*/React__default["default"].createElement(ComponentTag, _rollupPluginBabelHelpers["extends"]({
      className: tagClasses,
      id: tagId
    }, other), CustomIconElement && size !== 'sm' ? /*#__PURE__*/React__default["default"].createElement("div", {
      className: `${prefix}--tag__custom-icon`
    }, /*#__PURE__*/React__default["default"].createElement(CustomIconElement, null)) : '', /*#__PURE__*/React__default["default"].createElement(Text.Text, {
      title: typeof children === 'string' ? children : undefined,
      className: `${prefix}--tag__label`
    }, children !== null && children !== undefined ? children : typeText), normalizedSlug, /*#__PURE__*/React__default["default"].createElement("button", {
      type: "button",
      className: `${prefix}--tag__close-icon`,
      onClick: handleClose,
      disabled: disabled,
      "aria-label": title,
      title: title
    }, _Close || (_Close = /*#__PURE__*/React__default["default"].createElement(iconsReact.Close, null))));
  }
  const ComponentTag = BaseComponent ?? (other.onClick || className?.includes(`${prefix}--tag--operational`) ? 'button' : 'div');
  const labelClasses = cx__default["default"]({
    [`${prefix}--tag__label`]: !isInteractiveTag,
    [`${prefix}--tag--${type}`]: type && !isInteractiveTag
  });
  return /*#__PURE__*/React__default["default"].createElement(ComponentTag, _rollupPluginBabelHelpers["extends"]({
    ref: ref,
    disabled: disabled,
    className: tagClasses,
    id: tagId
  }, other), CustomIconElement && size !== 'sm' ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--tag__custom-icon`
  }, /*#__PURE__*/React__default["default"].createElement(CustomIconElement, null)) : '', isEllipsisApplied && !isInteractiveTag ? /*#__PURE__*/React__default["default"].createElement(DefinitionTooltip.DefinitionTooltip, {
    openOnHover: false,
    definition: children !== null && children !== undefined ? children : typeText,
    className: `${prefix}--definition--tooltip--tag`
  }, /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    title: children !== null && children !== undefined ? children : typeText,
    className: labelClasses
  }, children !== null && children !== undefined ? children : typeText)) : /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    title: children !== null && children !== undefined ? children : typeText,
    className: labelClasses
  }, children !== null && children !== undefined ? children : typeText), normalizedSlug);
});
Tag.propTypes = {
  /**
   * Provide an alternative tag or component to use instead of the default
   * wrapping element
   */
  as: PropTypes__default["default"].elementType,
  /**
   * Provide content to be rendered inside of a `Tag`
   */
  children: PropTypes__default["default"].node,
  /**
   * Provide a custom className that is applied to the containing <span>
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify if the `Tag` is disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Determine if `Tag` is a filter/chip
   */
  filter: deprecate["default"](PropTypes__default["default"].bool, 'The `filter` prop has been deprecated and will be removed in the next major version. Use DismissibleTag instead.'),
  /**
   * Specify the id for the tag.
   */
  id: PropTypes__default["default"].string,
  /**
   * Click handler for filter tag close button.
   */
  onClose: deprecate["default"](PropTypes__default["default"].func, 'The `onClose` prop has been deprecated and will be removed in the next major version. Use DismissibleTag instead.'),
  /**
   * Optional prop to render a custom icon.
   * Can be a React component class
   */
  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * Specify the size of the Tag. Currently supports either `sm`,
   * `md` (default) or `lg` sizes.
   */
  size: PropTypes__default["default"].oneOf(Object.keys(SIZES)),
  /**
   * **Experimental:** Provide a `Slug` component to be rendered inside the `Tag` component
   */
  slug: PropTypes__default["default"].node,
  /**
   * Text to show on clear filters
   */
  title: deprecate["default"](PropTypes__default["default"].string, 'The `title` prop has been deprecated and will be removed in the next major version. Use DismissibleTag instead.'),
  /**
   * Specify the type of the `Tag`
   */
  type: PropTypes__default["default"].oneOf(Object.keys(TYPES))
};

exports.SIZES = SIZES;
exports.TYPES = TYPES;
exports["default"] = Tag;
