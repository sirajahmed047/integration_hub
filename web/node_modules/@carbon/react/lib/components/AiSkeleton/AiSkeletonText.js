/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var SkeletonText = require('../SkeletonText/SkeletonText.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const AiSkeletonText = _ref => {
  let {
    className,
    ...rest
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const aiSkeletonTextClasses = cx__default["default"](className, {
    [`${prefix}--skeleton__text--ai`]: true
  });
  return /*#__PURE__*/React__default["default"].createElement(SkeletonText["default"], _rollupPluginBabelHelpers["extends"]({
    className: aiSkeletonTextClasses
  }, rest));
};
AiSkeletonText.propTypes = {
  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,
  /**
   * generates skeleton text at a larger size
   */
  heading: PropTypes__default["default"].bool,
  /**
   * the number of lines shown if paragraph is true
   */
  lineCount: PropTypes__default["default"].number,
  /**
   * will generate multiple lines of text
   */
  paragraph: PropTypes__default["default"].bool,
  /**
   * width (in px or %) of single line of text or max-width of paragraph lines
   */
  width: PropTypes__default["default"].string
};

exports["default"] = AiSkeletonText;
