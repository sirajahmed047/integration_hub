/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var Button = require('../Button/Button.js');
require('../Button/Button.Skeleton.js');
var Menu = require('../Menu/Menu.js');
require('../Menu/MenuItem.js');
var useAttachedMenu = require('../../internal/useAttachedMenu.js');
var useId = require('../../internal/useId.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const spacing = 0; // top and bottom spacing between the button and the menu. in px
const validButtonKinds = ['primary', 'tertiary', 'ghost'];
const defaultButtonKind = 'primary';
const MenuButton = /*#__PURE__*/React.forwardRef(function MenuButton(_ref, forwardRef) {
  let {
    children,
    className,
    disabled,
    kind = defaultButtonKind,
    label,
    size = 'lg',
    menuAlignment = 'bottom',
    tabIndex = 0,
    ...rest
  } = _ref;
  const id = useId.useId('MenuButton');
  const prefix = usePrefix.usePrefix();
  const triggerRef = React.useRef(null);
  const menuRef = React.useRef(null);
  const ref = useMergedRefs.useMergedRefs([forwardRef, triggerRef]);
  const [width, setWidth] = React.useState(0);
  const {
    open,
    x,
    y,
    handleClick: hookOnClick,
    handleMousedown,
    handleClose
  } = useAttachedMenu.useAttachedMenu(triggerRef);
  function handleClick() {
    if (triggerRef.current) {
      const {
        width: w
      } = triggerRef.current.getBoundingClientRect();
      setWidth(w);
      hookOnClick();
    }
  }
  function handleOpen() {
    if (menuRef.current) {
      menuRef.current.style.inlineSize = `${width}px`;
      menuRef.current.style.minInlineSize = `${width}px`;
      if (menuAlignment !== 'bottom' && menuAlignment !== 'top') {
        menuRef.current.style.inlineSize = `fit-content`;
      }
    }
  }
  const containerClasses = cx__default["default"](`${prefix}--menu-button__container`, className);
  const triggerClasses = cx__default["default"](`${prefix}--menu-button__trigger`, {
    [`${prefix}--menu-button__trigger--open`]: open
  });
  const menuClasses = cx__default["default"](`${prefix}--menu-button__${menuAlignment}`);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    ref: ref,
    "aria-owns": open ? id : undefined,
    className: containerClasses
  }), /*#__PURE__*/React__default["default"].createElement(Button["default"], {
    className: triggerClasses,
    size: size,
    tabIndex: tabIndex,
    kind: kind,
    renderIcon: iconsReact.ChevronDown,
    disabled: disabled,
    "aria-haspopup": true,
    "aria-expanded": open,
    onClick: handleClick,
    onMouseDown: handleMousedown,
    "aria-controls": open ? id : undefined
  }, label), /*#__PURE__*/React__default["default"].createElement(Menu.Menu, {
    containerRef: triggerRef,
    menuAlignment: menuAlignment,
    className: menuClasses,
    ref: menuRef,
    id: id,
    label: label,
    mode: "basic",
    size: size,
    open: open,
    onClose: handleClose,
    onOpen: handleOpen,
    x: x,
    y: [y[0] - spacing, y[1] + spacing]
  }, children));
});
MenuButton.propTypes = {
  /**
   * A collection of MenuItems to be rendered as actions for this MenuButton.
   */
  children: PropTypes__default["default"].node.isRequired,
  /**
   * Additional CSS class names.
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify whether the MenuButton should be disabled, or not.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Specify the type of button to be used as the base for the trigger button.
   */
  // @ts-ignore-next-line -- avoid spurious (?) TS2322 error
  kind: PropTypes__default["default"].oneOf(validButtonKinds),
  /**
   * Provide the label to be renderd on the trigger button.
   */
  label: PropTypes__default["default"].string.isRequired,
  /**
   * Experimental property. Specify how the menu should align with the button element
   */
  // @ts-ignore-next-line -- avoid spurious (?) TS2322 error
  menuAlignment: PropTypes__default["default"].oneOf(['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end']),
  /**
   * Specify the size of the button and menu.
   */
  // @ts-ignore-next-line -- avoid spurious (?) TS2322 error
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),
  /**
   * Specify the tabIndex of the button.
   */
  // @ts-ignore-next-line -- avoid spurious (?) TS2322 error
  tabIndex: PropTypes__default["default"].number
};

exports.MenuButton = MenuButton;
