/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var iconsReact = require('@carbon/icons-react');
var cx = require('classnames');
var Downshift = require('downshift');
var isEqual = require('lodash.isequal');
var PropTypes = require('prop-types');
var React = require('react');
var filter = require('../ComboBox/tools/filter.js');
var MultiSelectPropTypes = require('./MultiSelectPropTypes.js');
var index = require('../ListBox/index.js');
var itemToString = require('./tools/itemToString.js');
var mergeRefs = require('../../tools/mergeRefs.js');
var deprecate = require('../../prop-types/deprecate.js');
var useId = require('../../internal/useId.js');
var sorting = require('./tools/sorting.js');
var usePrefix = require('../../internal/usePrefix.js');
require('../FluidForm/FluidForm.js');
var FormContext = require('../FluidForm/FormContext.js');
var Selection = require('../../internal/Selection.js');
var match = require('../../internal/keyboard/match.js');
var ListBoxSelection = require('../ListBox/next/ListBoxSelection.js');
var ListBoxTrigger = require('../ListBox/next/ListBoxTrigger.js');
var ListBoxPropTypes = require('../ListBox/ListBoxPropTypes.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var Downshift__default = /*#__PURE__*/_interopDefaultLegacy(Downshift);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const {
  InputBlur,
  InputKeyDownEnter,
  ItemClick,
  MenuMouseLeave,
  InputKeyDownArrowUp,
  InputKeyDownArrowDown,
  ItemMouseMove,
  InputClick,
  ToggleButtonClick,
  FunctionToggleMenu,
  InputChange,
  InputKeyDownEscape,
  FunctionSetHighlightedIndex
} = Downshift.useCombobox.stateChangeTypes;
const {
  SelectedItemKeyDownBackspace,
  SelectedItemKeyDownDelete,
  DropdownKeyDownBackspace,
  FunctionRemoveSelectedItem
} = Downshift.useMultipleSelection.stateChangeTypes;
const FilterableMultiSelect = /*#__PURE__*/React__default["default"].forwardRef(function FilterableMultiSelect(_ref, ref) {
  let {
    className: containerClassName,
    clearSelectionDescription = 'Total items selected: ',
    clearSelectionText = 'To clear selection, press Delete or Backspace',
    compareItems = sorting.defaultCompareItems,
    direction = 'bottom',
    disabled = false,
    downshiftProps,
    filterItems = filter.defaultFilterItems,
    helperText,
    hideLabel,
    id,
    initialSelectedItems = [],
    invalid,
    invalidText,
    items,
    itemToElement: ItemToElement,
    // needs to be capitalized for react to render it correctly
    itemToString: itemToString$1 = itemToString.defaultItemToString,
    light,
    locale = 'en',
    onInputValueChange,
    open = false,
    onChange,
    onMenuChange,
    placeholder,
    titleText,
    type,
    selectionFeedback = 'top-after-reopen',
    selectedItems: selected,
    size,
    sortItems = sorting.defaultSortItems,
    translateWithId,
    useTitleInItem,
    warn,
    warnText,
    slug
  } = _ref;
  const {
    isFluid
  } = React.useContext(FormContext.FormContext);
  const [isFocused, setIsFocused] = React.useState(false);
  const [isOpen, setIsOpen] = React.useState(!!open);
  const [prevOpen, setPrevOpen] = React.useState(!!open);
  const [inputValue, setInputValue] = React.useState('');
  const [topItems, setTopItems] = React.useState(initialSelectedItems ?? []);
  const [inputFocused, setInputFocused] = React.useState(false);
  const {
    selectedItems: controlledSelectedItems,
    onItemChange,
    clearSelection
  } = Selection.useSelection({
    disabled,
    initialSelectedItems,
    onChange,
    selectedItems: selected
  });
  const textInput = React.useRef(null);
  const filterableMultiSelectInstanceId = useId.useId();
  const prefix = usePrefix.usePrefix();
  if (prevOpen !== open) {
    setIsOpen(open);
    setPrevOpen(open);
  }
  const sortedItems = sortItems(filterItems(items, {
    itemToString: itemToString$1,
    inputValue
  }), {
    selectedItems: {
      top: controlledSelectedItems,
      fixed: [],
      'top-after-reopen': topItems
    }[selectionFeedback],
    itemToString: itemToString$1,
    compareItems,
    locale
  });
  const inline = type === 'inline';
  const showWarning = !invalid && warn;
  const wrapperClasses = cx__default["default"](`${prefix}--multi-select__wrapper`, `${prefix}--multi-select--filterable__wrapper`, `${prefix}--list-box__wrapper`, containerClassName, {
    [`${prefix}--multi-select__wrapper--inline`]: inline,
    [`${prefix}--list-box__wrapper--inline`]: inline,
    [`${prefix}--multi-select__wrapper--inline--invalid`]: inline && invalid,
    [`${prefix}--list-box__wrapper--inline--invalid`]: inline && invalid,
    [`${prefix}--list-box--up`]: direction === 'top',
    [`${prefix}--list-box__wrapper--fluid--invalid`]: isFluid && invalid,
    [`${prefix}--list-box__wrapper--fluid--focus`]: isFluid && isFocused,
    [`${prefix}--list-box__wrapper--slug`]: slug
  });
  const helperId = !helperText ? undefined : `filterablemultiselect-helper-text-${filterableMultiSelectInstanceId}`;
  const labelId = `${id}-label`;
  const titleClasses = cx__default["default"]({
    [`${prefix}--label`]: true,
    [`${prefix}--label--disabled`]: disabled,
    [`${prefix}--visually-hidden`]: hideLabel
  });
  const helperClasses = cx__default["default"]({
    [`${prefix}--form__helper-text`]: true,
    [`${prefix}--form__helper-text--disabled`]: disabled
  });
  const inputClasses = cx__default["default"]({
    [`${prefix}--text-input`]: true,
    [`${prefix}--text-input--empty`]: !inputValue,
    [`${prefix}--text-input--light`]: light
  });
  const helper = helperText ? /*#__PURE__*/React__default["default"].createElement("div", {
    id: helperId,
    className: helperClasses
  }, helperText) : null;
  const menuId = `${id}__menu`;
  const inputId = `${id}-input`;
  React.useEffect(() => {
    if (!isOpen) {
      setTopItems(controlledSelectedItems);
    }
  }, [controlledSelectedItems, isOpen, setTopItems]);
  function handleMenuChange(forceIsOpen) {
    const nextIsOpen = forceIsOpen ?? !isOpen;
    setIsOpen(nextIsOpen);
    if (onMenuChange) {
      onMenuChange(nextIsOpen);
    }
  }
  const {
    getToggleButtonProps,
    getLabelProps,
    getMenuProps,
    getInputProps,
    highlightedIndex,
    setHighlightedIndex,
    getItemProps,
    openMenu,
    isOpen: isMenuOpen
  } = Downshift.useCombobox({
    isOpen,
    items: sortedItems,
    itemToString: itemToString$1,
    defaultHighlightedIndex: 0,
    // after selection, highlight the first item.
    id,
    labelId,
    menuId,
    inputId,
    inputValue,
    stateReducer,
    isItemDisabled(item, _index) {
      return item.disabled;
    }
  });
  function stateReducer(state, actionAndChanges) {
    const {
      type,
      props,
      changes
    } = actionAndChanges;
    const {
      highlightedIndex
    } = changes;
    if (changes.isOpen && !isOpen) {
      setTopItems(controlledSelectedItems);
    }
    switch (type) {
      case InputKeyDownEnter:
        if (changes.selectedItem && changes.selectedItem.disabled !== true) {
          onItemChange(changes.selectedItem);
        }
        setHighlightedIndex(changes.selectedItem);
        return {
          ...changes,
          highlightedIndex: state.highlightedIndex
        };
      case ItemClick:
        if (changes.selectedItem) {
          onItemChange(changes.selectedItem);
        }
        setHighlightedIndex(changes.selectedItem);
        return changes;
      case InputBlur:
      case InputKeyDownEscape:
        setIsOpen(false);
        return changes;
      case FunctionToggleMenu:
      case ToggleButtonClick:
        if (changes.isOpen && !changes.selectedItem) {
          return {
            ...changes,
            highlightedIndex: 0
          };
        }
        return changes;
      case InputChange:
        if (onInputValueChange) {
          onInputValueChange(changes.inputValue);
        }
        setInputValue(changes.inputValue ?? '');
        setIsOpen(true);
        return changes;
      case InputClick:
        return {
          ...changes,
          isOpen: false
        };
      case MenuMouseLeave:
        return {
          ...changes,
          highlightedIndex: state.highlightedIndex
        };
      case InputKeyDownArrowUp:
      case InputKeyDownArrowDown:
        if (InputKeyDownArrowDown === type && !isOpen) {
          setIsOpen(true);
        }
        if (highlightedIndex > -1) {
          const itemArray = document.querySelectorAll(`li.${prefix}--list-box__menu-item[role="option"]`);
          props.scrollIntoView(itemArray[highlightedIndex]);
        }
        if (highlightedIndex === -1) {
          return {
            ...changes,
            highlightedIndex: 0
          };
        }
        return changes;
      case ItemMouseMove:
        return {
          ...changes,
          highlightedIndex: state.highlightedIndex
        };
      case FunctionSetHighlightedIndex:
        if (!isOpen) {
          return {
            ...changes,
            highlightedIndex: 0
          };
        } else {
          return {
            ...changes,
            highlightedIndex: props.items.indexOf(highlightedIndex)
          };
        }
      default:
        return changes;
    }
  }
  const {
    getDropdownProps
  } = Downshift.useMultipleSelection({
    ...downshiftProps,
    activeIndex: highlightedIndex,
    initialSelectedItems,
    selectedItems: controlledSelectedItems,
    itemToString: itemToString$1,
    onStateChange(changes) {
      switch (changes.type) {
        case SelectedItemKeyDownBackspace:
        case SelectedItemKeyDownDelete:
        case DropdownKeyDownBackspace:
        case FunctionRemoveSelectedItem:
          {
            clearSelection();
            break;
          }
      }
    }
  });
  React.useEffect(() => {
    if (isOpen && !isMenuOpen) {
      openMenu();
    }
  });
  function clearInputValue(event) {
    const value = textInput.current?.value;
    if (value?.length === 1 || event && match.match(event, keys.Escape)) {
      setInputValue('');
    } else {
      setInputValue(value ?? '');
    }
    if (textInput.current) {
      textInput.current.focus();
    }
  }

  // Slug is always size `mini`
  let normalizedSlug;
  if (slug && slug['type']?.displayName === 'Slug') {
    normalizedSlug = /*#__PURE__*/React__default["default"].cloneElement(slug, {
      size: 'mini'
    });
  }
  const className = cx__default["default"](`${prefix}--multi-select`, `${prefix}--combo-box`, `${prefix}--multi-select--filterable`, {
    [`${prefix}--multi-select--invalid`]: invalid,
    [`${prefix}--multi-select--invalid--focused`]: invalid && inputFocused,
    [`${prefix}--multi-select--open`]: isOpen,
    [`${prefix}--multi-select--inline`]: inline,
    [`${prefix}--multi-select--selected`]: controlledSelectedItems?.length > 0,
    [`${prefix}--multi-select--filterable--input-focused`]: inputFocused
  });
  const labelProps = getLabelProps();
  const buttonProps = getToggleButtonProps({
    disabled,
    onClick: () => {
      handleMenuChange(!isOpen);
      textInput.current?.focus();
    },
    // When we moved the "root node" of Downshift to the <input> for
    // ARIA 1.2 compliance, we unfortunately hit this branch for the
    // "mouseup" event that downshift listens to:
    // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065
    //
    // As a result, it will reset the state of the component and so we
    // stop the event from propagating to prevent this. This allows the
    // toggleMenu behavior for the toggleButton to correctly open and
    // close the menu.
    onMouseUp(event) {
      if (isOpen) {
        event.stopPropagation();
      }
    }
  });
  const inputProps = getInputProps(getDropdownProps({
    'aria-controls': isOpen ? menuId : undefined,
    'aria-describedby': helperText ? helperId : undefined,
    'aria-haspopup': 'listbox',
    // Remove excess aria `aria-labelledby`. HTML <label for>
    // provides this aria information.
    'aria-labelledby': undefined,
    disabled,
    placeholder,
    preventKeyAction: isOpen,
    onClick: () => handleMenuChange(true),
    onKeyDown(event) {
      const $input = event.target;
      const $value = $input.value;
      if (match.match(event, keys.Space)) {
        event.stopPropagation();
      }
      if (match.match(event, keys.Enter)) {
        handleMenuChange(true);
      }
      if (!disabled) {
        if (match.match(event, keys.Delete) || match.match(event, keys.Escape)) {
          if (isOpen) {
            handleMenuChange(true);
            clearInputValue(event);
            event.stopPropagation();
          } else if (!isOpen) {
            clearInputValue(event);
            clearSelection();
            event.stopPropagation();
          }
        }
      }
      if (match.match(event, keys.Tab)) {
        handleMenuChange(false);
      }
      if (match.match(event, keys.Home)) {
        $input.setSelectionRange(0, 0);
      }
      if (match.match(event, keys.End)) {
        $input.setSelectionRange($value.length, $value.length);
      }
    },
    onFocus: () => setInputFocused(true),
    onBlur() {
      setInputFocused(false);
      setInputValue('');
    }
  }));
  const menuProps = getMenuProps({}, {
    suppressRefError: true
  });
  const handleFocus = evt => {
    if (evt?.target.classList.contains(`${prefix}--tag__close-icon`) || evt?.target.classList.contains(`${prefix}--list-box__selection`)) {
      setIsFocused(false);
    } else {
      setIsFocused(evt?.type === 'focus' ? true : false);
    }
  };
  const clearSelectionContent = controlledSelectedItems.length > 0 ? /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--visually-hidden`
  }, clearSelectionDescription, " ", controlledSelectedItems.length, ",", clearSelectionText) : /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--visually-hidden`
  }, clearSelectionDescription, ": 0");
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: wrapperClasses
  }, titleText ? /*#__PURE__*/React__default["default"].createElement("label", _rollupPluginBabelHelpers["extends"]({
    className: titleClasses
  }, labelProps), titleText, /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--visually-hidden`
  }, clearSelectionContent)) : null, /*#__PURE__*/React__default["default"].createElement(index["default"], {
    onFocus: isFluid ? handleFocus : undefined,
    onBlur: isFluid ? handleFocus : undefined,
    className: className,
    disabled: disabled,
    light: light,
    ref: ref,
    invalid: invalid,
    invalidText: invalidText,
    warn: warn,
    warnText: warnText,
    isOpen: isOpen,
    size: size
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--list-box__field`
  }, controlledSelectedItems.length > 0 &&
  /*#__PURE__*/
  // @ts-expect-error: It is expecting a non-required prop called: "onClearSelection"
  React__default["default"].createElement(ListBoxSelection["default"], {
    clearSelection: () => {
      clearSelection();
      if (textInput.current) {
        textInput.current.focus();
      }
    },
    selectionCount: controlledSelectedItems.length,
    translateWithId: translateWithId,
    disabled: disabled
  }), /*#__PURE__*/React__default["default"].createElement("input", _rollupPluginBabelHelpers["extends"]({
    className: inputClasses
  }, inputProps, {
    ref: mergeRefs["default"](textInput, inputProps.ref)
  })), invalid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: `${prefix}--list-box__invalid-icon`
  }), showWarning && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: `${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`
  }), inputValue &&
  /*#__PURE__*/
  // @ts-expect-error: It is expecting two non-required prop called: "onClearSelection" & "selectionCount"
  React__default["default"].createElement(ListBoxSelection["default"], {
    clearSelection: clearInputValue,
    disabled: disabled,
    translateWithId: translateWithId,
    onMouseUp: event => {
      // If we do not stop this event from propagating,
      // it seems like Downshift takes our event and
      // prevents us from getting `onClick` /
      // `clearSelection` from the underlying <button> in
      // ListBoxSelection
      event.stopPropagation();
    }
  }), /*#__PURE__*/React__default["default"].createElement(ListBoxTrigger["default"], _rollupPluginBabelHelpers["extends"]({}, buttonProps, {
    // @ts-expect-error
    isOpen: isOpen,
    translateWithId: translateWithId
  }))), normalizedSlug, /*#__PURE__*/React__default["default"].createElement(index["default"].Menu, menuProps, isOpen ? sortedItems.map((item, index$1) => {
    const isChecked = controlledSelectedItems.filter(selected => isEqual__default["default"](selected, item)).length > 0;
    const itemProps = getItemProps({
      item,
      ['aria-selected']: isChecked
    });
    const itemText = itemToString$1(item);

    // The initial implementation using <Downshift> would place the disabled attribute
    // on disabled menu items. Conversely, useCombobox places aria-disabled instead.
    // To avoid any potential breaking changes, we avoid placing aria-disabled and
    // instead match the old behavior of placing the disabled attribute.
    const disabled = itemProps['aria-disabled'];
    const {
      'aria-disabled': unusedAriaDisabled,
      // eslint-disable-line @typescript-eslint/no-unused-vars
      ...modifiedItemProps
    } = itemProps;
    return /*#__PURE__*/React__default["default"].createElement(index["default"].MenuItem, _rollupPluginBabelHelpers["extends"]({
      key: itemProps.id,
      "aria-label": itemText,
      isActive: isChecked,
      isHighlighted: highlightedIndex === index$1,
      title: itemText,
      disabled: disabled
    }, modifiedItemProps), /*#__PURE__*/React__default["default"].createElement("div", {
      className: `${prefix}--checkbox-wrapper`
    }, /*#__PURE__*/React__default["default"].createElement("span", {
      title: useTitleInItem ? itemText : undefined,
      className: `${prefix}--checkbox-label`,
      "data-contained-checkbox-state": isChecked,
      id: `${itemProps.id}-item`
    }, ItemToElement ? /*#__PURE__*/React__default["default"].createElement(ItemToElement, _rollupPluginBabelHelpers["extends"]({
      key: itemProps.id
    }, item)) : itemText)));
  }) : null)), !inline && !invalid && !warn ? helper : null);
});
FilterableMultiSelect.propTypes = {
  /**
   * Deprecated, aria-label is no longer needed
   * Specify a label to be read by screen readers on the container node
   */
  ['aria-label']: deprecate["default"](PropTypes__default["default"].string, 'ariaLabel / aria-label props are no longer required for FilterableMultiSelect'),
  /**
   * Deprecated, please use `aria-label` instead.
   * Specify a label to be read by screen readers on the container note.
   */
  ariaLabel: deprecate["default"](PropTypes__default["default"].string, 'ariaLabel / aria-label props are no longer required for FilterableMultiSelect'),
  /**
   * Specify the text that should be read for screen readers that describes total items selected
   */
  clearSelectionDescription: PropTypes__default["default"].string,
  /**
   * Specify the text that should be read for screen readers to clear selection.
   */
  clearSelectionText: PropTypes__default["default"].string,
  /**
   * Specify the direction of the multiselect dropdown. Can be either top or bottom.
   */
  direction: PropTypes__default["default"].oneOf(['top', 'bottom']),
  /**
   * Disable the control
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Additional props passed to Downshift
   */
  // @ts-ignore
  downshiftProps: PropTypes__default["default"].shape(Downshift__default["default"].propTypes),
  /**
   * Specify whether the title text should be hidden or not
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * Specify a custom `id`
   */
  id: PropTypes__default["default"].string.isRequired,
  /**
   * Allow users to pass in arbitrary items from their collection that are
   * pre-selected
   */
  initialSelectedItems: PropTypes__default["default"].array,
  /**
   * Is the current selection invalid?
   */
  invalid: PropTypes__default["default"].bool,
  /**
   * If invalid, what is the error?
   */
  invalidText: PropTypes__default["default"].node,
  /**
   * Function to render items as custom components instead of strings.
   * Defaults to null and is overridden by a getter
   */
  itemToElement: PropTypes__default["default"].func,
  /**
   * Helper function passed to downshift that allows the library to render a
   * given item to a string label. By default, it extracts the `label` field
   * from a given item to serve as the item label in the list.
   */
  itemToString: PropTypes__default["default"].func,
  /**
   * We try to stay as generic as possible here to allow individuals to pass
   * in a collection of whatever kind of data structure they prefer
   */
  items: PropTypes__default["default"].array.isRequired,
  /**
   * `true` to use the light version.
   */
  light: deprecate["default"](PropTypes__default["default"].bool, 'The `light` prop for `FilterableMultiSelect` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),
  /**
   * Specify the locale of the control. Used for the default `compareItems`
   * used for sorting the list of items in the control.
   */
  locale: PropTypes__default["default"].string,
  /**
   * `onChange` is a utility for this controlled component to communicate to a
   * consuming component what kind of internal state changes are occurring.
   */
  onChange: PropTypes__default["default"].func,
  /**
   * `onInputValueChange` is a utility for this controlled component to communicate to
   * the currently typed input.
   */
  onInputValueChange: PropTypes__default["default"].func,
  /**
   * `onMenuChange` is a utility for this controlled component to communicate to a
   * consuming component that the menu was opened(`true`)/closed(`false`).
   */
  onMenuChange: PropTypes__default["default"].func,
  /**
   * Initialize the component with an open(`true`)/closed(`false`) menu.
   */
  open: PropTypes__default["default"].bool,
  /**
   * Generic `placeholder` that will be used as the textual representation of
   * what this field is for
   */
  placeholder: PropTypes__default["default"].string,
  /**
   * Specify feedback (mode) of the selection.
   * `top`: selected item jumps to top
   * `fixed`: selected item stays at it's position
   * `top-after-reopen`: selected item jump to top after reopen dropdown
   */
  selectionFeedback: PropTypes__default["default"].oneOf(['top', 'fixed', 'top-after-reopen']),
  /**
   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.
   */
  size: ListBoxPropTypes.ListBoxSize,
  /**
   * **Experimental**: Provide a `Slug` component to be rendered inside the `FilterableMultiSelect` component
   */
  slug: PropTypes__default["default"].node,
  ...MultiSelectPropTypes.sortingPropTypes,
  /**
   * Provide text to be used in a `<label>` element that is tied to the
   * combobox via ARIA attributes.
   */
  titleText: PropTypes__default["default"].node,
  /**
   * Callback function for translating ListBoxMenuIcon SVG title
   */
  translateWithId: PropTypes__default["default"].func,
  /**
   * Specify title to show title on hover
   */
  useTitleInItem: PropTypes__default["default"].bool,
  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};

exports["default"] = FilterableMultiSelect;
