/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var index = require('../Toggletip/index.js');
var index$1 = require('../IconButton/index.js');
var iconsReact = require('@carbon/icons-react');
var useId = require('../../internal/useId.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _Undo;
const SlugContent = /*#__PURE__*/React__default["default"].forwardRef(function SlugContent(_ref, ref) {
  let {
    children,
    className
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const hasSlugActions = React__default["default"].Children.toArray(children).some(child => child.type?.displayName === 'SlugActions');
  const slugContentClasses = cx__default["default"](className, {
    [`${prefix}--slug-content`]: true,
    [`${prefix}--slug-content--with-actions`]: hasSlugActions
  });
  return /*#__PURE__*/React__default["default"].createElement(index.ToggletipContent, {
    className: slugContentClasses,
    ref: ref
  }, children);
});
SlugContent.displayName = 'SlugContent';
SlugContent.propTypes = {
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to the AI slug callout
   */
  className: PropTypes__default["default"].string
};
const SlugActions = /*#__PURE__*/React__default["default"].forwardRef(function SlugActions(_ref2, ref) {
  let {
    children,
    className
  } = _ref2;
  const prefix = usePrefix.usePrefix();
  const slugActionBarClasses = cx__default["default"](className, {
    [`${prefix}--slug-actions`]: true
  });
  return /*#__PURE__*/React__default["default"].createElement(index.ToggletipActions, {
    className: slugActionBarClasses,
    ref: ref
  }, children);
});
SlugActions.displayName = 'SlugActions';
SlugActions.propTypes = {
  /**
   * Specify the content you want rendered inside the slug callout toolbar
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to the AI slug toolbar
   */
  className: PropTypes__default["default"].string
};
const Slug = /*#__PURE__*/React__default["default"].forwardRef(function Slug(_ref3, ref) {
  let {
    aiText = 'AI',
    aiTextLabel,
    align,
    autoAlign = true,
    children,
    className,
    kind = 'default',
    onRevertClick,
    revertActive,
    revertLabel = 'Revert to AI input',
    slugLabel = 'Show information',
    size = 'xs',
    ...rest
  } = _ref3;
  const prefix = usePrefix.usePrefix();
  const id = useId.useId('slug');
  const slugClasses = cx__default["default"](className, {
    [`${prefix}--slug`]: true,
    [`${prefix}--slug--revert`]: revertActive
  });
  const slugButtonClasses = cx__default["default"]({
    [`${prefix}--slug__button`]: true,
    [`${prefix}--slug__button--${size}`]: size,
    [`${prefix}--slug__button--${kind}`]: kind,
    [`${prefix}--slug__button--inline-with-content`]: kind === 'inline' && aiTextLabel
  });
  const handleOnRevertClick = evt => {
    if (onRevertClick) {
      onRevertClick(evt);
    }
  };
  const ariaLabel = !aiTextLabel ? `${aiText} - ${slugLabel}` : `${aiText} - ${aiTextLabel}`;
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: slugClasses,
    ref: ref,
    id: id
  }, revertActive ? /*#__PURE__*/React__default["default"].createElement(index$1.IconButton, _rollupPluginBabelHelpers["extends"]({
    onClick: handleOnRevertClick,
    kind: "ghost",
    size: "sm",
    label: revertLabel
  }, rest), _Undo || (_Undo = /*#__PURE__*/React__default["default"].createElement(iconsReact.Undo, null))) : /*#__PURE__*/React__default["default"].createElement(index.Toggletip, _rollupPluginBabelHelpers["extends"]({
    align: align,
    autoAlign: autoAlign
  }, rest), /*#__PURE__*/React__default["default"].createElement(index.ToggletipButton, {
    className: slugButtonClasses,
    label: ariaLabel
  }, /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--slug__text`
  }, aiText), aiTextLabel && /*#__PURE__*/React__default["default"].createElement("span", {
    className: `${prefix}--slug__additional-text`
  }, aiTextLabel)), children));
});
Slug.displayName = 'Slug';
Slug.propTypes = {
  /**
   * Specify the correct translation of the AI text
   */
  aiText: PropTypes__default["default"].string,
  /**
   * Specify additional text to be rendered next to the AI label in the inline variant
   */
  aiTextLabel: PropTypes__default["default"].string,
  /**
   * Specify how the popover should align with the button
   */
  align: PropTypes__default["default"].oneOf(['top', 'top-left',
  // deprecated use top-start instead
  'top-start', 'top-right',
  // deprecated use top-end instead
  'top-end', 'bottom', 'bottom-left',
  // deprecated use bottom-start instead
  'bottom-start', 'bottom-right',
  // deprecated use bottom-end instead
  'bottom-end', 'left', 'left-bottom',
  // deprecated use left-end instead
  'left-end', 'left-top',
  // deprecated use left-start instead
  'left-start', 'right', 'right-bottom',
  // deprecated use right-end instead
  'right-end', 'right-top',
  // deprecated use right-start instead
  'right-start']),
  /**
   * Will auto-align the popover. This prop is currently experimental and is subject to future changes.
   */
  autoAlign: PropTypes__default["default"].bool,
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to the AI slug
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the type of Slug, from the following list of types:
   */
  kind: PropTypes__default["default"].oneOf(['default', 'inline']),
  /**
   * Callback function that fires when the revert button is clicked
   */
  onRevertClick: PropTypes__default["default"].func,
  /**
   * Specify whether the revert button should be visible
   */
  revertActive: PropTypes__default["default"].bool,
  /**
   * Specify the text that should be shown when the revert button is hovered
   */
  revertLabel: PropTypes__default["default"].string,
  /**
   * Specify the size of the button, from the following list of sizes:
   */
  size: PropTypes__default["default"].oneOf(['mini', '2xs', 'xs', 'sm', 'md', 'lg', 'xl']),
  /**
   * Specify the content you want rendered inside the slug ToggleTip
   */
  slugContent: PropTypes__default["default"].node,
  /**
   * Specify the text that will be provided to the aria-label of the `Slug` button
   */
  slugLabel: PropTypes__default["default"].string
};

exports.Slug = Slug;
exports.SlugActions = SlugActions;
exports.SlugContent = SlugContent;
