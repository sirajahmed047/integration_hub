/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var RadioTile = require('../RadioTile/RadioTile.js');
var usePrefix = require('../../internal/usePrefix.js');
var noopFn = require('../../internal/noopFn.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const TileGroup = props => {
  const {
    children,
    className,
    defaultSelected,
    disabled,
    legend,
    name,
    onChange = noopFn.noopFn,
    valueSelected,
    required
  } = props;
  const prefix = usePrefix.usePrefix();
  const [selected, setSelected] = React.useState(valueSelected ?? defaultSelected);
  const [prevValueSelected, setPrevValueSelected] = React.useState(valueSelected);

  /**
   * prop + state alignment - getDerivedStateFromProps
   * only update if selected prop changes
   */
  if (valueSelected !== prevValueSelected) {
    setSelected(valueSelected);
    setPrevValueSelected(valueSelected);
  }
  const getRadioTilesWithWrappers = children => {
    const traverseAndModifyChildren = children => {
      return React__default["default"].Children.map(children, child => {
        // If RadioTile found, return it with necessary props
        if (child.type === RadioTile["default"]) {
          const {
            value,
            ...otherProps
          } = child.props;
          return /*#__PURE__*/React__default["default"].createElement(RadioTile["default"], _rollupPluginBabelHelpers["extends"]({}, otherProps, {
            required: required,
            name: name,
            key: value,
            value: value,
            onChange: handleChange,
            checked: value === selected
          }));
        } else if (child.props && child.props.children) {
          // If the child is not RadioTile and has children, recheck the children
          return /*#__PURE__*/React__default["default"].cloneElement(child, {
            ...child.props,
            children: traverseAndModifyChildren(child.props.children)
          });
        } else {
          // If the child is neither a RadioTile nor has children, return it as is
          return child;
        }
      });
    };
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, traverseAndModifyChildren(children));
  };
  const handleChange = (newSelection, value, evt) => {
    if (newSelection !== selected) {
      setSelected(newSelection);
      onChange(newSelection, name, evt);
    }
  };
  const renderLegend = legend => {
    if (legend) {
      return /*#__PURE__*/React__default["default"].createElement("legend", {
        className: `${prefix}--label`
      }, legend);
    }
  };
  return /*#__PURE__*/React__default["default"].createElement("fieldset", {
    className: className ?? `${prefix}--tile-group`,
    disabled: disabled
  }, renderLegend(legend), /*#__PURE__*/React__default["default"].createElement("div", null, getRadioTilesWithWrappers(children)));
};
TileGroup.propTypes = {
  /**
   * Provide a collection of <RadioTile> components to render in the group
   */
  children: PropTypes__default["default"].node,
  /**
   * Provide an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the the value of <RadioTile> to be selected by default
   */
  defaultSelected: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Specify whether the group is disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Provide an optional legend for this group
   */
  legend: PropTypes__default["default"].string,
  /**
   * Specify the name of the underlying `<input>` nodes
   */
  name: PropTypes__default["default"].string.isRequired,
  /**
   * Provide an optional `onChange` hook that is called whenever the value of
   * the group changes
   */
  onChange: PropTypes__default["default"].func,
  /**
   * `true` to specify if input selection in group is required.
   */
  required: PropTypes__default["default"].bool,
  /**
   * Specify the value that is currently selected in the group
   */
  valueSelected: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number])
};
TileGroup.displayName = 'TileGroup';

exports["default"] = TileGroup;
